# .env.example - Archivo de ejemplo para configuraci√≥n
# Copiar este archivo a .env y ajustar los valores seg√∫n tu entorno

# ======================
# CONFIGURACI√ìN FLASK
# ======================
SECRET_KEY=tu-clave-secreta-super-segura-aqui-cambiar-en-produccion
FLASK_ENV=development
FLASK_DEBUG=True

# ======================
# BASE DE DATOS - ORIGEN (controllogistico.v1)
# ======================
SOURCE_DB_HOST=localhost
SOURCE_DB_USER=root
SOURCE_DB_PASSWORD=Dali19((Kafka
SOURCE_DB_NAME=controllogistico.v1
SOURCE_DB_PORT=3306

# ======================
# BASE DE DATOS - DESTINO (tms_historico)
# ======================
TARGET_DB_HOST=localhost
TARGET_DB_USER=root
TARGET_DB_PASSWORD=Dali19((Kafka
TARGET_DB_NAME=tms_historico
TARGET_DB_PORT=3306

# ======================
# API BOLTRACK
# ======================
API_BASE_URL=https://gestiondeflota.boltrack.net/integracionapi
API_TOKEN=bltrck2021_454fd3d

# ======================
# ARCHIVOS DE DATOS
# ======================
EXCEL_GEOCERCAS_PATH=./data/GEOCERCAS_CBN.xlsx
HISTORICAL_DATA_PATH=./data/DataGrid.xlsx
REPORTS_OUTPUT_PATH=./reports

# ======================
# CONFIGURACI√ìN DE ALERTAS
# ======================
ALERT_CRITICAL_HOURS=48
ALERT_WARNING_HOURS=8
ALERT_NORMAL_HOURS=4

# ======================
# CELERY (TAREAS EN BACKGROUND)
# ======================
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0

# ======================
# CONFIGURACI√ìN DE AUTO-REFRESH
# ======================
AUTO_REFRESH_INTERVAL_MINUTES=30
BACKGROUND_PROCESSING_INTERVAL_HOURS=4

# ======================
# NOTIFICACIONES POR EMAIL (OPCIONAL)
# ======================
ENABLE_EMAIL_ALERTS=False
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
SMTP_USE_TLS=True
SMTP_USERNAME=tu-email@gmail.com
SMTP_PASSWORD=tu-password-de-aplicacion
ALERT_EMAIL_FROM=sistema-tracking@tuempresa.com
ALERT_EMAIL_TO=admin@tuempresa.com,logistica@tuempresa.com

# ======================
# CONFIGURACI√ìN WEB
# ======================
WEB_HOST=0.0.0.0
WEB_PORT=5000
MAX_WORKERS=4
REQUEST_TIMEOUT=120

# ======================
# LOGGING
# ======================
LOG_LEVEL=INFO
LOG_FILE=./logs/truck_tracking.log
LOG_MAX_SIZE_MB=100
LOG_BACKUP_COUNT=5

# ======================
# SEGURIDAD
# ======================
CORS_ORIGINS=http://localhost:3000,http://localhost:5000
API_RATE_LIMIT=100 per hour
ENABLE_BASIC_AUTH=False
BASIC_AUTH_USERNAME=admin
BASIC_AUTH_PASSWORD=admin123

# ======================
# CONFIGURACI√ìN DE RENDIMIENTO
# ======================
ENABLE_CACHING=True
CACHE_TIMEOUT_SECONDS=300
MAX_API_RETRIES=3
API_TIMEOUT_SECONDS=30
PARALLEL_REQUESTS=True
MAX_PARALLEL_WORKERS=5

---

# config.py - Configuraci√≥n centralizada de la aplicaci√≥n
import os
from decouple import config
from datetime import timedelta

class Config:
    """Configuraci√≥n base de la aplicaci√≥n"""

    # Flask
    SECRET_KEY = config('SECRET_KEY', default='dev-secret-key-change-in-production')
    FLASK_ENV = config('FLASK_ENV', default='development')
    DEBUG = config('FLASK_DEBUG', default=True, cast=bool)

    # Base de datos origen
    SOURCE_DB_CONFIG = {
        'host': config('SOURCE_DB_HOST', default='localhost'),
        'user': config('SOURCE_DB_USER', default='root'),
        'password': config('SOURCE_DB_PASSWORD', default='password'),
        'database': config('SOURCE_DB_NAME', default='controllogistico.v1'),
        'port': config('SOURCE_DB_PORT', default=3306, cast=int),
        'charset': 'utf8mb4',
        'cursorclass': 'DictCursor'
    }

    # Base de datos destino
    TARGET_DB_CONFIG = {
        'host': config('TARGET_DB_HOST', default='localhost'),
        'user': config('TARGET_DB_USER', default='root'),
        'password': config('TARGET_DB_PASSWORD', default='password'),
        'database': config('TARGET_DB_NAME', default='tms_historico'),
        'port': config('TARGET_DB_PORT', default=3306, cast=int),
        'charset': 'utf8mb4',
        'cursorclass': 'DictCursor'
    }

    # API Boltrack
    API_CONFIG = {
        'base_url': config('API_BASE_URL', default='https://gestiondeflota.boltrack.net/integracionapi'),
        'token': config('API_TOKEN', default='your-token-here')
    }

    # Archivos
    EXCEL_GEOCERCAS_PATH = config('EXCEL_GEOCERCAS_PATH', default='./data/GEOCERCAS_CBN.xlsx')
    HISTORICAL_DATA_PATH = config('HISTORICAL_DATA_PATH', default='./data/DataGrid.xlsx')
    REPORTS_OUTPUT_PATH = config('REPORTS_OUTPUT_PATH', default='./reports')

    # Alertas
    ALERT_CONFIG = {
        'critical_hours': config('ALERT_CRITICAL_HOURS', default=48, cast=int),
        'warning_hours': config('ALERT_WARNING_HOURS', default=8, cast=int),
        'normal_hours': config('ALERT_NORMAL_HOURS', default=4, cast=int)
    }

    # Celery
    CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='redis://localhost:6379/0')
    CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')

    # Auto-refresh
    AUTO_REFRESH_INTERVAL = config('AUTO_REFRESH_INTERVAL_MINUTES', default=30, cast=int)
    BACKGROUND_PROCESSING_INTERVAL = config('BACKGROUND_PROCESSING_INTERVAL_HOURS', default=4, cast=int)

    # Email
    ENABLE_EMAIL_ALERTS = config('ENABLE_EMAIL_ALERTS', default=False, cast=bool)
    MAIL_SERVER = config('SMTP_SERVER', default='smtp.gmail.com')
    MAIL_PORT = config('SMTP_PORT', default=587, cast=int)
    MAIL_USE_TLS = config('SMTP_USE_TLS', default=True, cast=bool)
    MAIL_USERNAME = config('SMTP_USERNAME', default='')
    MAIL_PASSWORD = config('SMTP_PASSWORD', default='')
    ALERT_EMAIL_FROM = config('ALERT_EMAIL_FROM', default='sistema@tracking.com')
    ALERT_EMAIL_TO = config('ALERT_EMAIL_TO', default='admin@tracking.com').split(',')

    # Web
    WEB_HOST = config('WEB_HOST', default='0.0.0.0')
    WEB_PORT = config('WEB_PORT', default=5000, cast=int)
    MAX_WORKERS = config('MAX_WORKERS', default=4, cast=int)
    REQUEST_TIMEOUT = config('REQUEST_TIMEOUT', default=120, cast=int)

    # Logging
    LOG_LEVEL = config('LOG_LEVEL', default='INFO')
    LOG_FILE = config('LOG_FILE', default='./logs/truck_tracking.log')
    LOG_MAX_SIZE_MB = config('LOG_MAX_SIZE_MB', default=100, cast=int)
    LOG_BACKUP_COUNT = config('LOG_BACKUP_COUNT', default=5, cast=int)

    # Seguridad
    CORS_ORIGINS = config('CORS_ORIGINS', default='*').split(',')
    API_RATE_LIMIT = config('API_RATE_LIMIT', default='100 per hour')
    ENABLE_BASIC_AUTH = config('ENABLE_BASIC_AUTH', default=False, cast=bool)
    BASIC_AUTH_USERNAME = config('BASIC_AUTH_USERNAME', default='admin')
    BASIC_AUTH_PASSWORD = config('BASIC_AUTH_PASSWORD', default='admin123')

    # Rendimiento
    ENABLE_CACHING = config('ENABLE_CACHING', default=True, cast=bool)
    CACHE_TIMEOUT = config('CACHE_TIMEOUT_SECONDS', default=300, cast=int)
    MAX_API_RETRIES = config('MAX_API_RETRIES', default=3, cast=int)
    API_TIMEOUT = config('API_TIMEOUT_SECONDS', default=30, cast=int)
    PARALLEL_REQUESTS = config('PARALLEL_REQUESTS', default=True, cast=bool)
    MAX_PARALLEL_WORKERS = config('MAX_PARALLEL_WORKERS', default=5, cast=int)

class DevelopmentConfig(Config):
    """Configuraci√≥n para desarrollo"""
    DEBUG = True
    FLASK_ENV = 'development'

class ProductionConfig(Config):
    """Configuraci√≥n para producci√≥n"""
    DEBUG = False
    FLASK_ENV = 'production'
    # Configuraciones adicionales de seguridad para producci√≥n
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = 'Lax'

class TestingConfig(Config):
    """Configuraci√≥n para testing"""
    TESTING = True
    DEBUG = True
    # Base de datos de pruebas
    SOURCE_DB_CONFIG = Config.SOURCE_DB_CONFIG.copy()
    SOURCE_DB_CONFIG['database'] = 'test_controllogistico'
    TARGET_DB_CONFIG = Config.TARGET_DB_CONFIG.copy()
    TARGET_DB_CONFIG['database'] = 'test_tms_historico'

# Diccionario de configuraciones
config_dict = {
    'development': DevelopmentConfig,
    'production': ProductionConfig,
    'testing': TestingConfig,
    'default': DevelopmentConfig
}

---

# setup.py - Script de instalaci√≥n y configuraci√≥n inicial
#!/usr/bin/env python3
"""
Script de configuraci√≥n inicial para el Sistema de Tracking de Camiones
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def create_directories():
    """Crea los directorios necesarios"""
    directories = [
        'data',
        'reports',
        'logs',
        'uploads',
        'static/css',
        'static/js',
        'static/images',
        'templates'
    ]

    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ Directorio creado: {directory}")

def create_env_file():
    """Crea el archivo .env basado en .env.example"""
    if not os.path.exists('.env.example'):
        print("‚ùå Archivo .env.example no encontrado")
        return False

    if os.path.exists('.env'):
        response = input("üìù El archivo .env ya existe. ¬øSobrescribir? (y/N): ")
        if response.lower() != 'y':
            print("‚è≠Ô∏è Manteniendo archivo .env existente")
            return True

    shutil.copy('.env.example', '.env')
    print("‚úÖ Archivo .env creado desde .env.example")
    print("üìù Recuerda editar .env con tus configuraciones espec√≠ficas")
    return True

def install_dependencies():
    """Instala las dependencias de Python"""
    if not os.path.exists('requirements.txt'):
        print("‚ùå Archivo requirements.txt no encontrado")
        return False

    print("üì¶ Instalando dependencias de Python...")
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'])
        print("‚úÖ Dependencias instaladas correctamente")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Error instalando dependencias")
        return False

def check_data_files():
    """Verifica que los archivos de datos existan"""
    required_files = [
        'data/GEOCERCAS_CBN.xlsx',
        'data/DataGrid.xlsx'
    ]

    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)

    if missing_files:
        print("‚ö†Ô∏è Archivos de datos faltantes:")
        for file_path in missing_files:
            print(f"   - {file_path}")
        print("üìù Coloca estos archivos en las rutas indicadas antes de ejecutar el sistema")
        return False
    else:
        print("‚úÖ Todos los archivos de datos est√°n presentes")
        return True

def test_database_connection():
    """Prueba la conexi√≥n a la base de datos"""
    try:
        from config import Config
        import pymysql

        print("üîç Probando conexi√≥n a base de datos...")

        # Probar conexi√≥n a BD origen
        try:
            connection = pymysql.connect(**Config.SOURCE_DB_CONFIG)
            connection.close()
            print("‚úÖ Conexi√≥n a BD origen exitosa")
        except Exception as e:
            print(f"‚ùå Error conectando a BD origen: {e}")
            return False

        # Probar conexi√≥n a BD destino
        try:
            connection = pymysql.connect(**Config.TARGET_DB_CONFIG)
            connection.close()
            print("‚úÖ Conexi√≥n a BD destino exitosa")
        except Exception as e:
            print(f"‚ùå Error conectando a BD destino: {e}")
            return False

        return True

    except ImportError:
        print("‚ö†Ô∏è No se pudieron importar las dependencias para probar la BD")
        return False

def create_sample_data():
    """Crea archivos de datos de ejemplo si no existen"""
    sample_geocercas = """NOMBREGRUPO,NOMBREGEOCERCA,PUNTOS GEOCERCA
DOCKS,DOCK - 7 - PLANTA SANTA CRUZ,-17.783 -63.182,-17.784 -63.181,-17.785 -63.182,-17.784 -63.183
TRACK AND TRACE,TYT - PLANTA SANTA CRUZ,-17.780 -63.180,-17.781 -63.179,-17.782 -63.180,-17.781 -63.181
CBN,PLANTA SANTA CRUZ,-17.785 -63.185,-17.786 -63.184,-17.787 -63.185,-17.786 -63.186
CIUDADES,SANTA CRUZ,-17.800 -63.200,-17.750 -63.150,-17.700 -63.200,-17.750 -63.250"""

    if not os.path.exists('data/GEOCERCAS_CBN.xlsx'):
        print("üìÑ Creando archivo de ejemplo GEOCERCAS_CBN.xlsx...")
        try:
            import pandas as pd
            from io import StringIO

            df = pd.read_csv(StringIO(sample_geocercas))
            df.to_excel('data/GEOCERCAS_CBN.xlsx', index=False)
            print("‚úÖ Archivo de ejemplo creado: data/GEOCERCAS_CBN.xlsx")
        except ImportError:
            print("‚ö†Ô∏è No se pudo crear archivo de ejemplo (pandas no disponible)")

def main():
    """Funci√≥n principal de configuraci√≥n"""
    print("üöõ Sistema de Tracking de Camiones - Configuraci√≥n Inicial")
    print("=" * 60)

    steps = [
        ("Creando directorios", create_directories),
        ("Creando archivo .env", create_env_file),
        ("Instalando dependencias", install_dependencies),
        ("Creando archivos de ejemplo", create_sample_data),
        ("Verificando archivos de datos", check_data_files),
        ("Probando conexi√≥n a BD", test_database_connection)
    ]

    for step_name, step_function in steps:
        print(f"\nüìã {step_name}...")
        try:
            if not step_function():
                print(f"‚ö†Ô∏è {step_name} fall√≥, pero continuando...")
        except Exception as e:
            print(f"‚ùå Error en {step_name}: {e}")

    print("\n" + "=" * 60)
    print("üéâ Configuraci√≥n inicial completada!")
    print("\nüìù Pr√≥ximos pasos:")
    print("1. Editar el archivo .env con tus configuraciones")
    print("2. Colocar archivos GEOCERCAS_CBN.xlsx y DataGrid.xlsx en ./data/")
    print("3. Ejecutar: python app.py")
    print("4. Abrir navegador en: http://localhost:5000")
    print("5. Ver documentaci√≥n API en: http://localhost:5000/docs/")

if __name__ == "__main__":
    main()

---

# run_setup.sh - Script bash para Linux/Mac
#!/bin/bash

echo "üöõ Sistema de Tracking de Camiones - Setup Autom√°tico"
echo "======================================================"

# Crear entorno virtual
echo "üêç Creando entorno virtual..."
python3 -m venv venv
source venv/bin/activate

# Actualizar pip
echo "üì¶ Actualizando pip..."
pip install --upgrade pip

# Ejecutar setup de Python
echo "üîß Ejecutando configuraci√≥n inicial..."
python setup.py

echo ""
echo "‚úÖ Setup completado!"
echo "üöÄ Para iniciar el sistema:"
echo "   source venv/bin/activate"
echo "   python app.py"

---

# run_setup.bat - Script batch para Windows
@echo off
echo üöõ Sistema de Tracking de Camiones - Setup Automatico
echo ======================================================

REM Crear entorno virtual
echo üêç Creando entorno virtual...
python -m venv venv
call venv\Scripts\activate.bat

REM Actualizar pip
echo üì¶ Actualizando pip...
python -m pip install --upgrade pip

REM Ejecutar setup de Python
echo üîß Ejecutando configuracion inicial...
python setup.py

echo.
echo ‚úÖ Setup completado!
echo üöÄ Para iniciar el sistema:
echo    venv\Scripts\activate.bat
echo    python app.py

pause